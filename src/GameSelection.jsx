import React, { useState, useEffect } from 'react';
import './CssFiles/GameSelection.css';
import { Helmet } from 'react-helmet';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import Draggable from 'react-draggable';
import { auth, db, collection, query, where, getDocs, updateDoc, doc, onSnapshot } from './firebase';
import { onAuthStateChanged } from 'firebase/auth';
import Creature from './Assets/PDTheCreature.png';
import Slots from './Slots'; // Import the Slots component
import { Button } from "@headlessui/react"; //download this package using "npm install @headlessui/react"
import {doc, getDoc, setDoc, updateDoc, increment} from "firebase/firestore";
import { auth, db } from "./firebase"; //Importing firebase instance

const MoneySlot = ({ amount }) => {
  const digits = amount.toString().split(''); // Split the amount digits

  //Function to store the number of times user has accessed specific game in their own Firebase document. 
  const handleGameClick = async (gameName, gamePath) => { 
    const user = auth.currentUser; //retrieves the current logged in user's ID from the database

    //block below doesn't allow the user to progress to play the game if not logged in.
    if(!user) 
    {
      console.error("User not logged in.");  
      return;
    }
    const userID = user.uid; //unique ID for each user generated by firebase
    const gameRef = doc(db, "Players", userID, "gameStats", gameName); //creating a reference to the document in  the db

    try{
      const gameSnap = await getDoc(gameRef); //retrieves the chosen document from Firestore

      if (gameSnap.exists()) //checks if the game has been played before in the gameStats subcollection
      {
        await updateDoc(gameRef, {clickCount: increment(1)}); //incrementing the clickcount variable by one
      }
      //the else block below will assume the player has never played the games before, creating a new document 
      else
      {
        await setDoc(gameRef, {name: gameName, clickCount: 1});
      }
      
    }
    catch (error) //in case of the firebase database failing, returns an error. 
    {
      console.error("Error updating game click count:", error)
    }

  }

  return (
    <div className="money-slot-window" style={{ width: `${(digits.length + 1) * 50}px` }}>
      <div className="title-bar">
        <span className="title-text">Money</span>
        <div className="window-buttons">
          <div className="window-btn minimize"></div>
          <div className="window-btn close"></div>
        </div>

        {/* ‚úÖ Stats Page Button */}
        <div className="mt-8 text-center">
          <Button 
            onClick={() => navigate("/stats")}
            className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
          >
            View Stats Page
          </Button>
        </div>

      </div>
      <div className="slot-display">
        <motion.div
          className="slot-digit"
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0, type: 'spring', stiffness: 100 }}
        >
          $
        </motion.div>
        {digits.map((digit, index) => (
          <motion.div
            key={index}
            className="slot-digit"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: (index + 1) * 0.1, type: 'spring', stiffness: 100 }}
          >
            {digit}
          </motion.div>
        ))}
      </div>
    </div>
  );
};
    </>
)};


const GameSelection = () => {
  const [money, setMoney] = useState(0);
  const [username, setUsername] = useState('Guest');
  const [currentTime, setCurrentTime] = useState('');
  const [taskInput, setTaskInput] = useState('');
  const [userDocId, setUserDocId] = useState(null);
  const [activeGame, setActiveGame] = useState(null); // State for active game
  const navigate = useNavigate();

  const games = [
    { id: 1, name: 'Statistics', icon: 'üìà', route: '/Stats' },
    { id: 2, name: 'Black Jack', icon: 'üÉè', route: '/Blackjack' },
    { id: 3, name: 'Roulette', icon: 'üõû', route: '/Roulette' },
    { id: 4, name: 'Slots', icon: 'üé∞', route: '/Slots' },
    { id: 5, name: 'Locked', icon: 'üîí', route: '/GameSelection' },
    { id: 6, name: 'Mystery', icon: '‚ùì', route: '/GameSelection' },
  ];

  useEffect(() => {
    const updateClock = () => {
      const now = new Date();
      const timeString = now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
      setCurrentTime(timeString);
    };

    updateClock();
    const interval = setInterval(updateClock, 1000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        fetchUserData(user.uid);
      } else {
        alert('User not authenticated');
        navigate('/GameSelection');
      }
    });
    return () => unsubscribe();
  }, [navigate]);

  const fetchUserData = async (uid) => {
    try {
      const playersRef = collection(db, 'Players');
      const q = query(playersRef, where('uid', '==', uid));
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        const userDoc = querySnapshot.docs[0];
        setMoney(userDoc.data().money);
        setUsername(userDoc.data().username);
        setUserDocId(userDoc.id);

        const userDocRef = doc(db, 'Players', userDoc.id);
        onSnapshot(userDocRef, (docSnap) => {
          if (docSnap.exists()) {
            setMoney(docSnap.data().money);
          }
        });
      } else {
        alert('User data not found.');
      }
    } catch (err) {
      alert('Failed to fetch user data: ' + err.message);
    }
  };

  const updateMoney = async (newMoney) => {
    try {
      if (userDocId) {
        const userDocRef = doc(db, 'Players', userDocId);
        await updateDoc(userDocRef, { money: newMoney });
        setMoney(newMoney);
      }
    } catch (err) {
      alert('Failed to update money: ' + err.message);
    }
  };

  const handleGameDoubleClick = (game) => {
    if (game.name === 'Slots') {
      setActiveGame('Slots'); // Activate Slots game without navigating
    } else {
      navigate(game.route);
    }
  };

  const closeActiveGame = () => {
    setActiveGame(null); // Close the active game
  };

  return (
    <div className="GS-Container">
      <Helmet>
        <title>Game Selection</title>
      </Helmet>
      <img className="PDImage" src={Creature} alt="cur" />

      {/* Time Display */}
      <div className="GS-TimeDisplay">{currentTime}</div>

      {/* Money Slot Display */}
      <Draggable>
        <div className="GS-MoneyDisplay">
          <MoneySlot amount={money} />
        </div>
      </Draggable>

      {/* Always Show Game Icons */}
      <div className="GS-Icons">
        {games.map((game) => (
          <div
            key={game.id}
            className="GS-IconLink"
            onDoubleClick={() => handleGameDoubleClick(game)}
          >
            <Draggable>
            <div className="GS-Icon">
              <div className="GS-IconImage">{game.icon}</div>
              <div className="GS-IconLabel">{game.name}</div>
            </div>
            </Draggable>
          </div>
        ))}
      </div>

      {/* Display Active Game Overlay */}
      {activeGame && (
        <div className="GS-ActiveGame">
          {activeGame === 'Slots' && <Slots closeGame={closeActiveGame} />} {/* Pass closeGame prop */}
        </div>
      )}

      {/* Taskbar */}
      <div className="GS-Taskbar">
        <input
          type="text"
          className="GS-TaskbarInput"
          placeholder="üîé|User Search üìà"
          value={taskInput}
          onChange={(e) => setTaskInput(e.target.value)}
        />
        <div className="GS-TaskbarUsername">Hello, {username}</div>
      </div>

      {/* Easter Egg Icon */}
      <div className="GS-EasterEgg">üóëÔ∏è</div>
    </div>
  );
};

export default GameSelection;
